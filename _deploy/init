#! /bin/bash

### BEGIN INIT INFO
# Provides:          autostart
# Required-Start:    $local_fs $remote_fs
# Required-Stop:     $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Example initscript
# Description:       This file should be used to construct scripts to be
#                    placed in /etc/init.d.
### END INIT INFO

# Author: Foo Bar <foobar@baz.org>
#
# Please remove the "Author" lines above and replace them
# with your own name if you copy and modify this script.

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
NAME="hector"
DESC="web application server"
HECTOR_SRC="/home/amok/src/${NAME}/"
SOCKDIR="/home/${NAME}/tmp/${NAME}/"
HECTORADMIN="${HECTOR_SRC}/build/hectoradmin/1exec"
SCRIPTNAME="${0}"

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

PHYS_MEM=`free -m | awk '/^Mem:/{print $2}'`
PHYS_MEM=`expr "${PHYS_MEM}" \* 1024`
ulimit -v ${PHYS_MEM}

VERBOSE="yes"

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#

is_running() {
	launchtool --check -t hector > /dev/null 2>&1
}

do_start() {
# Read configuration variable file if it is present
	is_running && echo " already running ... " && return
	launchtool -C ${HECTOR_SRC}/_deploy/launch-hectord.conf
	sleep 1
	chmod 755 ${SOCKDIR}
}

#
# Function that stops the daemon/service
#
do_stop() {
	is_running || echo " not running ... "
	is_running || return
	is_running && launchtool -k 2 -t hector
	is_running && sleep 1 && is_running &&	launchtool -k 15 -t hector > /dev/null 2>&1
	is_running && sleep 1 && is_running &&	launchtool -k 9 -t hector  > /dev/null 2>&1
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	test "`${HECTORADMIN} -R ${SOCKDIR} -r codestation 2>&1`" = "" &&
	test "`${HECTORADMIN} -R ${SOCKDIR} -r archigrama 2>&1`" = ""
}

do_restart() {
	test "`${HECTORADMIN} -R ${SOCKDIR} -A codestation 2>&1`" = "" &&
	test "`${HECTORADMIN} -R ${SOCKDIR} -A archigrama 2>&1`" = ""
}

case "$1" in
  start)
		[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
		do_start
		case "$?" in
			0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
			2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
		esac
	;;
  stop)
		[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
		do_stop
		case "$?" in
			0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
			2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
		esac
	;;
  reload)
#
# If do_reload() is not implemented then leave this commented out
# and leave 'force-reload' as an alias for 'restart'.
#
		log_daemon_msg "Reloading $DESC" "$NAME"
		do_reload
		log_end_msg $?
	;;
  restart)
		log_daemon_msg "Restarting $DESC" "$NAME"
		do_restart
		log_end_msg $?
	;;
	full-restart)
#
# If the "reload" option is implemented then remove the
# 'force-reload' alias
#
		log_daemon_msg "Restarting whole service $DESC" "$NAME"
		do_stop
		case "$?" in
			0|1)
			do_start
			case "$?" in
				0) log_end_msg 0 ;;
				1) log_end_msg 1 ;; # Old process is still running
				*) log_end_msg 1 ;; # Failed to start
			esac
			;;
			*)
				# Failed to stop
			log_end_msg 1
			;;
		esac
	;;
	status)
		log_daemon_msg "Service ${DESC}"
		if is_running ; then
			log_daemon_msg " is running."
		else
			log_daemon_msg " is NOT running."
		fi
		log_end_msg 0
	;;
  *)
		echo "Usage: $SCRIPTNAME {start|stop|restart|reload|full-restart|status}" >&2
		exit 3
	;;
esac

exit 0

# vim: ft=sh
